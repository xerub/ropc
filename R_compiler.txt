Part 2. The Lexer
=================

The lexer recognizes C preprocessor output directives:
    # NUMBER "filename"
    #line NUMBER "filename"

Keywords:
    if		T_K_IF
    else	T_K_ELSE
    do		T_K_DO
    while	T_K_WHILE
    break	T_K_BREAK
    continue	T_K_CONTINUE
    goto	T_K_GOTO
    const	T_K_CONST
    extern	T_K_EXTERN
    volatile	T_K_VOLATILE
Regular tokens:
    :		T_COLON
    ;		T_SEMICOLON
    ,		T_COMMA
    {		T_OPENCURLY
    }		T_CLOSECURLY
    [		T_OPENSQUARE
    ]		T_CLOSESQUARE
    (		T_OPENBRACE
    )		T_CLOSEBRACE
    =		T_ASSIGN
    !		T_LOGICNOT
    +		T_ADD
    -		T_SUB
    *		T_MUL
    /		T_DIV
    |		T_OR
    ^		T_XOR
    &		T_AND
    @		T_AT
Strings:
    "a"		T_STRING
Numbers:
    0x1, 077, 5	T_INT
    'a'		T_INT
Identifiers:
    a3, bla	T_ID

Adjacent strings can be merged into one single string.

Part 3. The Parser
==================

Will parse the source into a list of "struct the_node".
    struct the_node::next	contains the next node in source
    struct the_node::edge[]	contains the following nodes in execution flow
    struct the_node::code	code to emit: a list of nodes representing statements
